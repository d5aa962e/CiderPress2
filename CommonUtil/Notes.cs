/*
 * Copyright 2022 faddenSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
using System;
using System.Text;

namespace CommonUtil {
    /// <summary>
    /// Messages with priority levels, generated by processes that happen in the background.
    /// This provides a way to gather the notes for later presentation.
    /// </summary>
    public class Notes {
        /// <summary>
        /// Indication of whether a note is informative, warning about a problem, or reporting
        /// an error.
        /// </summary>
        public enum NoteType {
            Unknown = 0, Info, Warning, Error
        }

        /// <summary>
        /// One entry in the note list.  Instances are immutable.
        /// </summary>
        public class Note {
            public NoteType Type { get; private set; }
            public string Text { get; private set; }

            public Note(NoteType type, string text) {
                Type = type;
                Text = text;
            }

            public char TypeChar {
                get {
                    switch (Type) {
                        case NoteType.Info: return 'I';
                        case NoteType.Warning: return 'W';
                        case NoteType.Error: return 'E';
                        default: return '?';
                    }
                }
            }
            public override string ToString() {
                StringBuilder sb = new StringBuilder(Text.Length + 2);
                sb.Append(TypeChar);
                sb.Append(") ");
                sb.Append(Text);
                return sb.ToString();
            }
        }

        /// <summary>
        /// List of notes, held in the order in which they were generated.
        /// </summary>
        private List<Note> mNotes = new List<Note>();

        public int WarningCount { get; private set; }
        public int ErrorCount { get; private set; }

        public int Count { get { return mNotes.Count; } }

        public Notes() { }

        /// <summary>
        /// Gets a copy of the list of notes.
        /// </summary>
        /// <returns>List of notes.</returns>
        public List<Note> GetNotes() {
            // Note objects are immutable, so a shallow copy is fine.
            return new List<Note>(mNotes);
        }

        /// <summary>
        /// Adds all the notes from another Note object to this one.
        /// </summary>
        /// <param name="src">Source object.</param>
        public void MergeFrom(Notes src) {
            foreach (Note note in src.mNotes) {
                mNotes.Add(note);
            }
        }

        /// <summary>
        /// Adds a new Info-level entry to the list.
        /// </summary>
        /// <param name="text"></param>
        public void AddI(string text) {
            mNotes.Add(new Note(NoteType.Info, text));
        }

        /// <summary>
        /// Adds a new Warning-level entry to the list.
        /// </summary>
        /// <param name="text"></param>
        public void AddW(string text) {
            WarningCount++;
            mNotes.Add(new Note(NoteType.Warning, text));
        }

        /// <summary>
        /// Adds a new Error-level entry to the list.
        /// </summary>
        /// <param name="text"></param>
        public void AddE(string text) {
            ErrorCount++;
            mNotes.Add(new Note(NoteType.Error, text));
        }

        /// <summary>
        /// Clears existing notes.
        /// </summary>
        public void Clear() {
            mNotes.Clear();
            WarningCount = 0;
            ErrorCount = 0;
        }

        public override string ToString() {
            StringBuilder sb = new StringBuilder();
            foreach (Note note in mNotes) {
                sb.AppendLine("(" + note.TypeChar + ") " + note.Text);
            }
            return sb.ToString();
        }
    }
}
